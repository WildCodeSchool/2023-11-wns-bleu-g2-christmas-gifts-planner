services:
  db:
    image: postgres:15-alpine
    stop_grace_period: 0s
    environment:
      POSTGRES_PASSWORD: ${DB_PASS-postgres}
      PGUSER: ${DB_USER-postgres}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 2s
      timeout: 2s
      retries: 10
    volumes:
      - prodDB:/var/lib/postgresql/data

  backend:
    stop_grace_period: 0s
    env_file: backend/.env
    environment:
      DB_HOST: db
      DB_PASS: ${DB_PASS-postgres}
      DB_USER: ${DB_USER-postgres}
      JWT_PRIVATE_KEY: ${JWT_PRIVATE_KEY:-changeme}
      NODE_ENV: ${NODE_ENV:-production}
      FRONTEND_URL: ${FRONTEND_URL:-localhost:3000}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-localhost:3000}
      SMTP_HOST: ${SMTP_HOST:-smtp}
      SMTP_PORT: ${SMTP_PORT:-400}
      SMTP_USER: ${SMTP_USER:-yourId}
      SMTP_PASSWORD: ${SMTP_PASS:-yourPassword}
      EMAIL_FROM: ${EMAIL_FROM:-yourEmail}
      DB_PORT: ${DB_PORT:-5432}
      SERVER_PORT: ${SERVER_PORT:-4001}
    depends_on:
      db:
        condition: service_healthy
    image: docky1921/gifty-back

  frontend:
    environment:
      JWT_PRIVATE_KEY: ${JWT_PRIVATE_KEY:-changeme}
    stop_grace_period: 0s
    env_file: frontend/.env
    image: docky1921/gifty-front

  gateway:
    restart: always
    stop_grace_period: 0s
    build:
      context: gateway
      dockerfile: Dockerfile.production
    ports:
      - ${GATEWAY_PORT-80}:80

volumes:
  prodDB:
